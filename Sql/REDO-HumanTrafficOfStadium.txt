X city built a new stadium, each day many people visit it and the stats are saved as these columns: id, date, people

Please write a query to display the records which have 3 or more consecutive rows and the amount of people more than 100(inclusive).

For example, the table stadium:
+------+------------+-----------+
| id   | date       | people    |
+------+------------+-----------+
| 1    | 2017-01-01 | 10        |
| 2    | 2017-01-02 | 109       |
| 3    | 2017-01-03 | 150       |
| 4    | 2017-01-04 | 99        |
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-08 | 188       |
+------+------------+-----------+
For the sample data above, the output is:

+------+------------+-----------+
| id   | date       | people    |
+------+------------+-----------+
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-08 | 188       |
+------+------------+-----------+
Note:
Each day only have one row record, and the dates are increasing with id increasing.

# Write your MySQL query statement below
select s1.id, s1.date, s1.people from
(select * from stadium s where s.people >= 100) s1,
(select * from stadium s where s.people >= 100) s2,
(select * from stadium s where s.people >= 100) s3

where
### s1 is the first day, then s2, then s3 (normal case)
(s1.id + 1 = s2.id and s1.id + 2 = s3.id) or
### s1 is actually playing the role of s2, so s1 - 1 = s2 and s1 + 1 = s3 (s2 behaves like s1)
(s1.id - 1 = s2.id and s1.id + 1 = s3.id) or
### s1 is actually behaving like s3, so s1 - 1 = s3, s1 - 2 = s2
(s1.id - 2 = s2.id and s1.id - 1 = s3.id)

group by s1.id
/*
But this will produce duplicate results, for example in 4 consecutive days, there would be two days overlapping, which would pop out twice. In this way, the group by would eliminate the duplicate records.
*/
